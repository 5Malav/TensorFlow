# -*- coding: utf-8 -*-
"""Part -2 Tensor Initialization and Casting . ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AL4tendiUQBO_YcRLAWQwV0Kl2tvk-Dv
"""

import tensorflow as tf
import numpy as np

tensor_one_d= tf.constant([2,0,-3,9,90],dtype=tf.float64)
print(tensor_one_d)

# for memory use lower precision tensor

#tensor_one_d= tf.constant([2,0.2,-3,9,90],dtype=tf.int64)
#print(tensor_one_d)

# This will give an error
# TypeError: Cannot convert [2, 0.2, -3, 9, 90] to EagerTensor of dtype int64

# To solve this issue cast method can be used
tensor_one_d= tf.constant([2,0.2,-3,9,90],dtype=tf.float64)
print(tensor_one_d)

print(" ")

casted_tensor_one_d = tf.cast(tensor_one_d,dtype=tf.int16)
print(casted_tensor_one_d)

# caste into boolian

tensor_one_d= tf.constant([2,0.,-3,9,90],dtype=tf.float32)
print(tensor_one_d)

print(" ")

casted_tensor_one_d = tf.cast(tensor_one_d,dtype=tf.bool)
print(casted_tensor_one_d)

tensor_bool = tf.constant([True,True,False])

print(tensor_bool)

tensor_string = tf.constant(["TensorFlow and PYTorch"])
print(tensor_string)

# convert numpy array to tensor

np_arr =  np.array([1,2,3])
print(np_arr)

convert_tensor = tf.convert_to_tensor(np_arr)
print(convert_tensor)

# tf.eye

# construct an identity matrix or a batch of matrices.

eye_tensor = tf.eye(
    num_rows = 5,
    num_columns=None,
    batch_shape=None,
    dtype= tf.dtypes.float32,
    name=None
)
print(eye_tensor)

print(eye_tensor*8)

# num_columns = None means num_rows = num_columns

eye_tensor = tf.eye(
    num_rows = 5,
    num_columns=3,
    batch_shape=None,
    dtype= tf.dtypes.float32,
    name=None
)
print(eye_tensor)

eye_tensor = tf.eye(
    num_rows = 5,
    num_columns=5,
    batch_shape=None,
    dtype= tf.dtypes.bool,
    name=None
)
print(eye_tensor)

# change batch_shape

eye_tensor = tf.eye(
    num_rows = 5,
    num_columns=5,
    batch_shape=[2,], # 2  5*5 identity matrices
    dtype= tf.dtypes.int64,
    name=None
)
print(eye_tensor)

# tf. fill

# creates a tensor filled with a scaler value

tensor_fill = tf.fill(
    dims = [1,2],
    value=5,
    name=None
)
print(tensor_fill)

tensor_fill = tf.fill(
    dims = [3,3], # 2D matrix
    value=5,
    name=None
)
print(tensor_fill)

tensor_fill = tf.fill(
    dims = [3,3,3], # 3D matrix
    value=5,
    name=None
)
print(tensor_fill)

# tf. ones

# Creates a tensor with all elements set to 1.

tensor_ones= tf.ones(
    shape=[1,3],
    dtype = tf.dtypes.float32,
    name=None
)
print(tensor_ones)

tensor_ones= tf.ones(
    shape=[3,3],
    dtype = tf.dtypes.int32,
    name=None
)
print(tensor_ones)

tensor_ones= tf.ones(
    shape=[5,3],
    dtype = tf.dtypes.int32,
    name=None
)
print(tensor_ones)

tensor_ones= tf.ones(
    shape=[5,3,2],
    dtype = tf.dtypes.int32,
    name=None
)
print(tensor_ones)

# tf.ones_like

# creates a tensor of all ones that has the same shape as input

tensor_one_like= tf.ones_like(
    input = tensor_fill ,
    dtype=None,
    name=None
)
print(tensor_one_like)

# tf. zeros

# creates a tensor with all elements set to 0

tensor_zero = tf.zeros(
    shape = [3,2],
    dtype = tf.dtypes.int32,
    name=None
)
print(tensor_zero)

tensor_zero = tf.zeros(
    shape = [3,2,3],
    dtype = tf.dtypes.int32,
    name=None
)
print(tensor_zero)

# tf.shape

# Returns a tensor containing the shape of the input tensor

tensor_three_d=tf.constant([
 [[1,2,0],
 [3,5,-1]],

[[4,5,6],
 [7,-8,9]],

[[10,11,12],
 [13,-14,15]],

 [[16,17,18],
 [13,-14,15]]
])
print(tensor_three_d)

print(tf.shape(tensor_three_d))

# tf. rank

# Return the rank of a tensor

# shape of tensor 't' is [2,2,3]

t = tf.constant([[[1,1,1],[2,2,2]],[[3,3,3],[4,4,4]]])

tf.rank(t)

t = tf.constant([[1,1,1],[2,2,2]])

tf.rank(t)

# tf. size

# Returns the size of  a tensor

t = tf.constant([[[1,1,1],[2,2,2]],[[3,3,3],[4,4,4]]])


tensor_size= tf.size(
    input=t,
    out_type=tf.dtypes.int32,
    name=None
)

print(tensor_size) # 12 elements

t = tf.constant([[1,1,1],[2,2,2]])


tensor_size= tf.size(
    input=t,
    out_type=tf.dtypes.int32,
    name=None
)

print(tensor_size) # 6 elements

# tf.random.normal

# Outputs random values from a normal distribution

tensor_normal = tf.random.normal(
    shape =[3,4],
    mean = 0.0,
    stddev=1.0,
    dtype = tf.dtypes.float32,
    seed=None,
    name=None
)

print(tensor_normal)

# change the mean

tensor_normal = tf.random.normal(
    shape =[3,4],
    mean = 100.0,
    stddev=1.0,
    dtype = tf.dtypes.float32,
    seed=None,
    name=None
)

print(tensor_normal)

# change the mean and standard deviation


tensor_normal = tf.random.normal(
    shape =[3,4],
    mean = 100.0,
    stddev=5.0,
    dtype = tf.dtypes.float32,
    seed=None,
    name=None
)

print(tensor_normal)

tensor_normal = tf.random.normal(
    shape =[3,4],
    mean = -100.0,
    stddev=-5.0,
    dtype = tf.dtypes.float32,
    seed=None,
    name=None
)

print(tensor_normal)

# tf. random. uniform

# Outputs random values from a uniform distribution

tensor_uniform = tf.random.uniform(
    shape=[4,3],
    minval=0,
    maxval=None,
    dtype = tf.dtypes.float32,
    seed=None,
    name=None

)
print(tensor_uniform)

#change max and min value
# max = 1 default value and min=0 default value

tensor_uniform = tf.random.uniform(
    shape=[4,3],
    minval=-1,
    maxval=10,
    dtype = tf.dtypes.float32,
    seed=None,
    name=None

)
print(tensor_uniform)

# set a value of seed to get same out put each time when we run code

tf.random.set_seed(10)
tensor_uniform = tf.random.uniform(
    shape=[4,3],
    minval=-1,
    maxval=10,
    dtype = tf.dtypes.float32,
    seed=10,
    name=None

)
print(tensor_uniform)