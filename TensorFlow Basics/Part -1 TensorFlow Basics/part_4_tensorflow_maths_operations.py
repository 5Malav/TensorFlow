# -*- coding: utf-8 -*-
"""Part -4 TensorFlow Maths operations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fk72aT5yRLIgKUrIWK8lOib8m_UNnOG-
"""

import tensorflow as tf

#tf. math. abs

# Computes the absolute value of a tensor
# if input is <0 it converts to positive value

x = tf.constant(-0.2)
tensor_absolute = tf.math.abs(
    x,
    name=None
)
print(tensor_absolute)

x = tf.constant([2,-1,-0.2,3])
tensor_absolute = tf.math.abs(
    x,
    name=None
)
print(tensor_absolute)

# complex number
# absolute value of complex number
# a+bj is sqrt(a^2+b^2)

x = tf.constant([[-5.5+8j],[-9.9+13j]])
tensor_absolute = tf.math.abs(
    x,
    name=None
)
print(tensor_absolute)

# tf. math. add

# Returns x +y element - wise

x = tf.constant([2,5,8])
y = tf.constant([1,6,9])

tensor_add=tf.add(x,y)
print(tensor_add)

x = tf.constant([[2,5,8],[4,10,16]])
y = tf.constant([[1,6,9],[2,12,18]])

tensor_add=tf.add(x,y)
print(tensor_add)

x = tf.constant([[2,5,8],[4,10,16]])
y = tf.constant(1)

tensor_add=tf.add(x,y)
print(tensor_add)

# tf. math. divide_no_nan

# Computes a safe divide which return 0 if y(denominator) is zero

x = tf.constant([2,5,8])
y = tf.constant(0)


tensor_divide = tf.math.divide_no_nan(
    x,
    y,
    name=None
)
print(tensor_divide)

x = tf.constant([2,5,8])
y = tf.constant([1,2,10])


tensor_divide = tf.math.divide_no_nan(
    x,
    y,
    name=None
)
print(tensor_divide)

# tf. math.mutiply
# element wise operation

x = tf.constant([2,3,4,5])

y = tf.constant([[1],[3]])
print(tf.math.multiply(x,y))

# tf. math. maximum

# Return the max of x and y(i.e x> y ? x:y) element wise

x = tf.constant([2,3,4,5])

y = tf.constant([5,6,1,2])

tensor_max = tf.math.maximum(
    x,y
)
print(tensor_max)

x = tf.constant([1,0.2,0.3,0.4])

y = tf.constant([-5.])

tensor_max = tf.math.maximum(
    x,y
)
print(tensor_max)

# tf. math. minimum

# Return the max of x and y(i.e x< y ? x:y) element wise

x = tf.constant([1,0.2,0.3,0.4])

y = tf.constant([-5.])

tensor_max = tf.math.minimum(
    x,y
)
print(tensor_max)

# tf. math. argmax

# Returns the index with the largest value across axes of a tensor

x = tf.constant([2,20,30,3,6])

tensor_argmax = tf.math.argmax(
    input=x,
    axis=None,
    output_type=tf.dtypes.int64,
    name=None
)
print(tensor_argmax)


# 30 is the highest number. output will have index.

x = tf.constant([[5,20,30,3,6],
                [3,7,8,10,12],
                 [15,0,-1,3,4],
                [17,19,1,2,3]]
              )
print(x)

print(" ")

tensor_argmax = tf.math.argmax(
    input=x,
    axis=0,
    output_type=tf.dtypes.int64,
    name=None
)

print(tensor_argmax)
# will print index of max number from each column

print(x)

print(" ")
tensor_argmax = tf.math.argmax(
    input=x,
    axis=1,
    output_type=tf.dtypes.int64,
    name=None
)

print(tensor_argmax)
# will print index of max number from each row.

# tf. math. argin

# Returns the index with the smallest value across axes of a tensor

x = tf.constant([5,20,30,3,6])

tensor_argmin = tf.math.argmin(
    input=x,
    axis=None,
    output_type=tf.dtypes.int64,
    name=None
)

print(tensor_argmax)

x = tf.constant([[5,20,30,3,6],
                [3,7,8,10,12],
                 [15,0,-1,3,4],
                [17,19,1,2,3]]
              )
print(x)

print(" ")

tensor_argmin = tf.math.argmin(
    input=x,
    axis=1,
    output_type=tf.dtypes.int64,
    name=None
)
print(tensor_argmax)
# will print index of max number from each column

x = tf.constant([[5,20,30,3,6],
                [3,7,8,10,12],
                 [15,0,-1,3,4],
                [17,19,1,2,3]]
              )
print(x)

print(" ")

tensor_argmin = tf.math.argmin(
    input=x,
    axis=0,
    output_type=tf.dtypes.int64,
    name=None
)
print(tensor_argmax)
# will print index of max number from each column

# tf. math. equal

# Returns the truth value of x==y element wise.

x = tf.constant([2,4])
y = tf.constant([2])

tensor_equal = tf.math.equal(
    x,y,

)

# tf. math. pow

# Computes the power of one value to another
# element wise operation

x = tf.constant([[2,2],[3,3]])
y = tf.constant([[0,6],[2,3]])

tensor_power = tf.math.pow(
    x,y
)
print(tensor_power)

# tf. math. reduce_max

# Computes tf.math.maximum of element across dimensions of a tensor

x = tf.constant([1,2,3,4])


tensor_reduce = tf.math.reduce_max(
    input_tensor=x,
    axis=None,
    keepdims= False,
    name=None
)

print(tensor_reduce)

x = tf.constant([[1,5,3,4],[6,3,9,0]])


tensor_reduce = tf.math.reduce_max(
    input_tensor=x,
    axis=None,
    keepdims= False,
    name=None
)

print(tensor_reduce)

x = tf.constant([[1,5,3,4],[6,3,9,0]])


tensor_reduce = tf.math.reduce_max(
    input_tensor=x,
    axis=None,
    keepdims= True, # will print 2D array. it maintains dimension
    name=None
)

print(tensor_reduce)

# tf. math.reduce_sum will return sum of all elements

x = tf.constant([[1,5,3,4],[6,3,9,0]])


tensor_reduce = tf.math.reduce_sum(
    input_tensor=x,
    axis=None,
    keepdims= True, # will print 2D array. it maintains dimension
    name=None
)

print(tensor_reduce)

# tf. math.reduce_sum will return sum of all elements

x = tf.constant([[1,5,3,4],[6,3,9,0]])


tensor_reduce = tf.math.reduce_sum(
    input_tensor=x,
    axis=0, # axis = 0 will print array wil element wise addition
    keepdims= False, # will
    name=None
)

print(tensor_reduce)

# tf. math.reduce_sum will return sum of all elements

x = tf.constant([[1,5,3,4],[6,3,9,0]])
print(x)

print(" ")

tensor_reduce = tf.math.reduce_sum(
    input_tensor=x,
    axis=1, #
    keepdims= True, # axis=1 and true means rowwise addition
    name=None
)

print(tensor_reduce)

# tf. math. top_k

# Finds values and indices of the k largest entries for the last
# dimension

x =  tf.constant([10,20,30,1,4,5,7,8])

tensor_top_k = tf.math.top_k(x,k=2)

print(tensor_top_k)

# based on value of k it will print k maximum number from tensor

x =  tf.constant([10,20,30,1,4,5,7,8])

tensor_top_k = tf.math.top_k(x,k=4) # 4 maximum value from tensor

print(tensor_top_k)

# tf. math. sigmoid

# Computes sigmoid of x element wise.

# sigmoid(x)= y = 1/(1+exp(-x))

x =  tf.constant([0,1.0,50.0,8.0])
# enter float value only othwise for integer it shows error
tensor_sigmoid = tf.math.sigmoid(
    x,
    name=None
)
print(tensor_sigmoid)