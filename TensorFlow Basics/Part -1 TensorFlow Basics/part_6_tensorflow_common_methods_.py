# -*- coding: utf-8 -*-
"""Part - 6  TensorFlow Common Methods .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SB-tzS5BphCG6E6m3NM1l-dFJ4ZHCKIY
"""

import tensorflow as tf

# tf. expand_dims

# Returns a tensor with a length 1 axis inserted at index axis

a = tf.constant([1,2,3,4,5])
a.shape

tf.expand_dims(a,axis=0)

# add extra dimension of size 1

tf.expand_dims(a,axis=1)

# 2D tensor

a = tf.constant([[1,2,],
                 [3,4]])

a.shape

tf.expand_dims(a,axis=0)

#convert 2D to 3D

tf.expand_dims(a,axis=1)

tf.expand_dims(a,axis=-1)

# tf. squeeze

# Removes dimensions of size 1 from the shape of a tensor

a = tf.expand_dims(a,axis=-1)
a.shape
print(a)

tf.squeeze(a)

# tf.reshape

# Reshapes a tensor

a = tf.constant([1,2,3,4,5,6,7,8,9])
print(a)
print(" ")
print(a.shape)

tf.reshape(a,[1,9])

tf.reshape(a,[3,3])

tf.reshape(a,[1,-1])

tf.reshape(a,[3,3,1])

tf.reshape(a,[3,-1])
# -1 means tensorflow will figure out what is the right value for that
# dimension

a1 = tf.constant([[1,2,3],
                 [4,5,6]])

print(a1)
print("")

print("shape of a1 :",a1.shape)

tf.reshape(a1,[-1])

# tf. concat

# Concatenates tensors along one dimension

tensor_1 = tf.constant([[1,2,3],[4,5,6]])
print(tensor_1)

print(" ")


tensor_2 = tf.constant([[10,11,12],[7,8,9]])
print(tensor_2)

tf.concat([tensor_1,tensor_2],axis=0)

tf.concat([tensor_1,tensor_2],axis=1)

t1= tf.constant([
    [[1,2],
     [3,4]],

    [[5,6],
     [7,8]]
])

t2= tf.constant([
    [[10,20],
     [30,40]],

    [[50,60],
     [70,80]]
])

print(t1.shape)
print("")
print(t2.shape)

tf.concat([t1,t2],axis=0)

tf.concat([t1,t2],axis=1)

tf.concat([t1,t2],axis=-1)

tf.concat([t1,t2],axis=-2)

# tf.stack

# Stacks a list of rank-R tensors into one rank - (R+1) tensor

# with contact there is no extra dimension is created
# with stackk if input is 2D then output will be 3D

tf.stack([t1,t2],axis=0)

tensor_1 = tf.constant([[1,2,3],[4,5,6]])
print(tensor_1)

print(" ")


tensor_2 = tf.constant([[10,11,12],[7,8,9]])
print(tensor_2)

tf.stack([tensor_1,tensor_2],axis=0)

tf.stack([tensor_1,tensor_2],axis=1)

tf.stack([tensor_1,tensor_2],axis=-1)

# tf. pad

# Pads a tensor

tensor_1 = tf.constant([[1,2,3],[4,5,6]])
print(tensor_1)

print(" ")


tensor_2 = tf.constant([[10,11,12],[7,8,9]])
print(tensor_2)

print(" ")

paddings = tf.constant([[1,1],[2,2]])
print(paddings)

# contant values is 0

tf.pad(tensor_1,paddings,"CONSTANT")

# paddings values permit us to know how many values
# for at the top we are gonna add
# how many values at the bottom we are gonna add
# how many values to the left and right we are gonna add

tf.pad(tensor_1,paddings,"REFLECT")

# Reflect means value around tensors will be from tensor itself

# tf.gather

# Gather slices from params axis according to indices

a = tf.constant([1,2,3,4,5])
a

# when we slice tensor like...
# values will come in order if we do not want it like this
# we can use gather method

a[1:3]

tf.gather(a,[0,2,4],axis=0)

a = tf.constant([[1,2,3,4,5],
                 [6,7,8,9,10],
                 [11,12,13,14,15],
                 [16,17,18,19,20]])

a

tf.gather(a,[1,2],axis=0)

tf.gather(a,[3,4],axis=1)

tf.gather(a,[[1,2],[3,4]],axis=1)

a = tf.constant([[1,2,3,4,5],
                 [6,7,8,9,10],
                 [11,12,13,14,15],
                 [16,17,18,19,20]])

a

tf.gather_nd(a,[[1,2],[3,4]])

# pick up elements directly from tensor